＃ゴールデンホーン

　序：問題提起、事実証明。
　破：思考、想起転回、結論。
　急：次話への接続。雰囲気。

＃一話


　ハサウェイっていうのは、スクリプトの名称さ。
　まずみんなの知識を平滑化しようと思う。
　知ってる人は、流して聞いてね。
　スクリプトというのは、プログラム言語の一種で、あるメジャーな言語の上で動く、特化したプログラムの総称だ。
　スクリプトはスクラッチ可能な言語を指すこともあって、簡単な言語という意味合いも大きいけど、ここでいうスクリプトは、特化したプログラムという意味が大きいからね。
　さて、特化したというから、何に特化したのかっていう対象が必要だね。
　ハサウェイというのは、二枚の画像を出力することに特化したスクリプトエンジンなんだ。
　ああ、エンジンってつけてるのは、単に駆動するって意味だから、スクリプトもスクリプトエンジンも同じ意味だよ。まあ、スクリプトエンジン、といえば、雅語みたいなもので、かっこつけた云い方さ。

　じゃあ、話は二枚の画像の出力になるよね。一枚は疑似立体、二枚目はその他になる――。
　では、疑似立体から。
　疑似立体というのは、いわゆるワイヤーフレームさ。
　ワイヤーフレームというのは、そうだな、少し計算機の歴史を話そうか。
　計算機というのは、エジソンランプの点灯で〇と一を表現しようというとこから話が入る。つまり二進数うんぬんかんぬんだけど、教室大の大きさで、電圧を制御して、ランプを点灯させてようやく計算していた代物が、初期の初期の計算機になる。
　電卓なんて今ではチープなものだけど、初期の計算機にしてみれば、それはもう画期的なものなんだ。
　電卓は、ランプがどれくらいでできているか、考えて欲しい。あのチープな代物だけで、百や二百がある。これがディスプレイになるなんて、大昔の人間から――エジソンランプの時代の人間から考えると、想像もつかなかったに違いない。
　そうやって、一九四〇年頃にブラウン管テレビが発明されたりするんだ。
　ここまでくると、計算機は文字列を表現できるようになった。
　そして、何時の時代もゲームというのは、計算機にさせると画期的な効果をもたらすのさ。
　計算機で文字を表現できるようになると、その文字を使ってゲームができないか、って考える人間がかならずいる。小さい頃から、ボードゲームで遊んでいるからかもしれないけどね。
　暇つぶしに、高度な計算機で、暇つぶしをするのさ。
　初期の計算機ゲームは文字だけで示す必要があったのさ。
　文字しか表示できないから、枠というのも罫線素片で表現されてね。つまり直線か角の折れ曲がった線も一文字ということさ。
　例えば、白い枠に一行「ああっと！」っていうたった五文字を表現しようとしたら、上の線に一行、下の線に一行、左右の罫線に一行ずつとって、七文字と三行を使って表現したんだ。ちなみに、ボックスドローイングっていって、今でもフォントなんかは、罫線素片をサポートしているよ。
　で、エジソンランプからブラウン管になって、計算機もそこそこ計算能力がついてくると、次は文書起こしから、ようやく、産業の計算が求められたんだ。
　このあたりは、アポロ計画でもいいし、飛行機の設計でもいい。計算機をモノの設計として使えないかって話だね。
　製図のことは、キャドソフトっていうけど、つまりこの話さ。
　この製図に必要な能力は何かというと、単に直線や曲線を引くことだね。
　計算機で直線や曲線を引くんだけど、これはもともと、エジソンランプのひとつのランプだから、直線とは、ランプの集まりで人間がようやく直線に見える程度に概算されている。
　この表示のためだけの概算っていうのも無駄な処理ではあるんだけど、エジソンランプは半分にできないからインテージャー、整数って話だね。
　ブラウン管の解像度に合わせておおよそドットを打って直線にしたわけだ。
　さて、製図用途だから、立体のものを表現する必要がある。でも、ディスプレイとは、どこからどうみても平面だ。最初の計算機は製図でよく使われる平面の三点図で示していたけれど――ああ三点図というのは、上から見た図、横から見た図、正面から見た図のことで――、その平面三つで立体を表現するだけでは物足りなくなった。
　モノを作る前の出来を見ようとした場合、どうしても立体表現が必要だったわけだ。
　しかし、絵画の世界では、古くから立体を表現する手法がある。
　疑似立体っていうのは、こっちの立体のことだね。
　どうにか、計算機で直線を引けるようになったから、それを使って、正しい立体ではないにしろ、立体っぽく見えないだろうかっていうのが、疑似立体だ。
　疑似と云っても、人間は立体に見えるから実は、産業用途はともかく、ゲームの世界では問題ないっていうね。
　ハサウェイという、スクリプトエンジンは、平面に直線を描いて、疑似立体を表現することができる。
　さ、もう一つの、その他、のほうだ。これは文字、罫線、絵だね。
　ハサウェイは二つの画像を算出できる。
　この能力に特化しているし、表示に関してはおそろしく早い。

　抽象的に伝えてるから、いまいちピンとこないかな。抽象的に伝えるのは、ハサウェイというのはそこそこ懐が広いからなんだけど。
　まあ、もう少し具体的にいうと、ワイヤーフレームの迷宮と戦闘画面を出力するのが、ハサウェイというスクリプトエンジンなんだ。
　もっと別の観点からハサウェイというスクリプトエンジンを見ると、これはゲームエンジンであるし、シナリオスクリプトだ。
　こっちの話をするよ。
　じゃあ、シナリオスクリプトの観点から、ハサウェイを見よう。
　ああ、ちなみに、ハサウェイっていう名前は、ハミルトンのオマージュだ。ハミルトンとはアポロ計画で使われた、ジョブ管理システムの名称だね。

　さて、シナリオスクリプトというのは、ノンプログラマでも、簡単に記述できるまさにスクリプトという意味を誇張した表現だ。
　単純に文字を打って、出力すれば、長い行の場合は、ユーザに入力待ちを促して、次の文字を表示するような。
　画像の出力を指示すれば、すぐに表示するような。
　ハサウェイは二枚の画像からできてるって云ったよね。このその他の方は、文字表現、背景画像の表示、あるいはパーティー画面の表示とか、そのためにある。
　ゲームのメッセージ画面は、基本は動かないから、一度作ってしまえば、あとは、その枠に文字を埋め込むだけでいい。つまり文字だけ変更すれば、ゲームらしく見えるというわけさ。
　疑似立体、ワイヤーフレーム側も同様で、最小表現は九文字で擬似立体を表すことができる。
　ああ、疑似立体って一人視点ね。いわゆる現実視点みたいな感じだ。この視界の広さを九つの箱で表現するんだ。
　例えば、十字路。その一歩後ろから見ると、側面の左右と前方の左右に箱が見える。目の前は十字路で、左右に道も見える。実際示したほうがわかるよね。「０」が道で「１」が壁、「＊」が立っている場所。

　１０１
　０００
　１＊１

　ハサウェイにこんな指示をすると十字路の疑似立体が表現される。
　この裏側では、一点透視法的に直線を箱型に表示したり、見えない直線は省略されるような処理がなされる。疑似立体だから厳密に立体を表現するわけじゃなくて、そもそも平面だから、描画しないようにする、わけだね。
　でも計算処理は恐ろしく早い。物理エンジンではあらゆる物体の交差を計算して平面に落とすけど、疑似立体ではそういうものだと割り切って、直線を表示しないだけだったりするからね。
　すべてが道の表示はまさになにも表現されない。「０００００００００」の九文字で表現できるね。何も直線を描画しないからまさに一瞬で擬似立体を表現できるんだ。
　厳密には東の扉や西の扉とか、扉を表現するには情報が足りないけど、概ねこんなところかな。