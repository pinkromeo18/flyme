＃ウィザードリィの神々は嗤う

＃一幕

　女は、最初に数十行ほど勢いよく書いたが、消した。
　仕様は少ないほうがいい。
　女は、考えた挙げ句、枠の大きさを決めた。
　四八〇×四八〇の正方形。
　それを画像に出力することをまずする。
　単純に、すべてのピクセルを黒で塗りつぶすだけだ。
　外枠を白い線にするのはやめた。
　最初は純粋に、立体の世界にしようと考えた。
　しかし、そのモジュールは膨大だった。
　モジュール。ショートカットのための道具。
　便利といえば、便利であるが、それはハードを選ぶのだ。
　しかし、ジェイペグなど画像は、どの端末でも表示可能である。
　そこが気に入った。
　必要なのは、線分の定義。
　その線分であるところのドットの連続を白く塗りつぶすこと。
　画像は文字列の羅列でも表現できる。基本情報を除けば、その幅のサイズによって、二次元配列に見立てることができる。単純に縦と横。
　それは順番に、どの座標に、どの色をおけばいいのかが示されている。
　文字列の連続体は、直感的ではないので、関数にした。
　座標と色を指定する関数。縦と横と色を指定すれば、ドットが打てる。
　線分とはつまりこの関数の、線分の間を埋める数だけ呼んだ結果だ。
　端から端まで、この一ドットの関数は、四八〇回呼ばれる。
　多いだろうか。いや、一ミリ秒で一〇〇万回は叩ける。
　プログラマの常識では、既に呼ぶというよりも叩くのだ。
　女は、仕様書に一行加えた。
　二〇マス×二〇マスの迷宮は、一秒間に一〇〇万回生成できること――。
　これをするには、まだ先が長い。

　女がまず満足したのは、折り紙の対角を二度折り曲げて開いた時のものが出力されたときだ。
　端から端に交差する。バツの印。線は白い。
　線分を作る命令を二度呼んだのだ。ここには、一ドットの関数が一千回ほど詰まっている。その一ドットの関数は、人間では直感的ではない、画像の文字列に文字を入れるために使われる。
　この省略のなんと便利なことか。
　たかだか、数十行の命令を組み合わせれば、ものすごい省略ができる。
　なんとなく洗練化したい気はする。
　ベンチマークやリファクタは、ともかくとして、次に進んだ。
　女は、その線分の命令によって四角形を考えた。
　が、すぐにやめる。難しいのではない。
　四角形とは多角形なのだ。抽象的な原点はこれ。
　座標を二つ指定すれば、線分。三つは三角形。
　閉じるか閉じないかを考えた。
　座標三つで三角形は、実はできない。線分を二つ指定しているに過ぎないため、一辺足りない。
　ほんとにそれが必要か。
　クローズポリゴン。オープンポリゴン。あるいは、オンオフのフラグ。
　女は、やめた。
　座標を四つ指定すればいい。最初の座標と最後の座標が同じであれば、それは三角形。離れていれば、一辺足りない四角形。
　座標の状態が閉じているのか、開いているのかは問題ではないのだ。
　計算機にドットの数を数えさせ、その多角形の面積とは、必要ない。
　疑似立体に見えればいい。
　大きい四角形を中央に表示して、中に小さな四角形を表示する。
　二つの四角形の頂点を、それぞれ対応する頂点へ線引けば、どう見えるか。
　それは疑似立体で、なんとなく、箱に見える。
　美術の時間にならう、一点透視法を、プログラムしているのだ。
　最終的には、箱、そのそれぞれの面への指定である。
　その箱は、北を奥として、東西南北天地。
　その箱とは、部屋である。一マスは部屋で示される。
　それを、迷宮は、二〇マス×二〇マスとしたのだから、画像に表示できる範囲で、表示すればいい。
　このドットや線分。あるいは文字列から始まる話は、迷宮。
　ダンジョンのこと。
　疑似迷宮。ワイヤーフレームと呼ばれるものである。
　女は、八〇〇行ほど書いた。
　堅牢に堅牢。
　洗練させれば五〇〇行ほどになった。
　テストコードを書いた。文字列。「壁」の文字で壁を表現する。
　視覚的に書いた。文字列の壁という文字で四角の形。
　迷宮表示プログラムに入力した。
　横倒しの台形が錯覚を引き起こす。
　ワイヤーフレームの迷宮が現れた。